import { NextRequest, NextResponse } from 'next/server';
import { aiService } from '@/lib/ai';
import { ChatMessage, LearningStyle } from '@/lib/ai/types';
import { LearningStyleAnalysis } from '@/lib/ai/learningStyleDetector';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { messages, learningStyle, sessionId } = body;

    // Validate request
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return NextResponse.json(
        { error: 'Messages array is required' },
        { status: 400 }
      );
    }

    // Convert messages to AI service format
    const aiMessages: ChatMessage[] = messages.map((msg: any) => ({
      role: msg.sender === 'ai' ? 'assistant' : 'user',
      content: msg.message,
      timestamp: msg.timestamp
    }));

    // Analyze learning style if not provided
    let detectedLearningStyle = learningStyle;
    let learningStyleAnalysis: LearningStyleAnalysis | null = null;
    
    if (!detectedLearningStyle) {
      learningStyleAnalysis = await aiService.analyzeLearningStyle(aiMessages);
      detectedLearningStyle = learningStyleAnalysis.detectedStyle;
    }

    // Generate AI response
    console.log('Generating AI response for:', aiMessages[aiMessages.length - 1]?.content);
    console.log('Available providers:', aiService.getAvailableProviders());
    
    const response = await aiService.generateResponse(aiMessages, {
      learningStyle: detectedLearningStyle,
      temperature: 0.7,
      maxTokens: 1000,
    });
    
    console.log('AI response generated by provider:', response.provider);

    // Format response based on learning style
    const formattedContent = aiService.formatResponseForLearningStyle(response.content, detectedLearningStyle);

    // Return response in expected format
    return NextResponse.json({
      success: true,
      data: {
        id: `ai_${Date.now()}`,
        message: formattedContent,
        sender: 'ai',
        timestamp: new Date().toISOString(),
        sessionId,
        learningStyle: detectedLearningStyle,
        learningStyleAnalysis: learningStyleAnalysis,
        provider: response.provider,
        usage: response.usage
      }
    });

  } catch (error) {
    console.error('Chat API error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to generate response',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  // Health check endpoint
  const providers = aiService.getAvailableProviders();
  
  return NextResponse.json({
    success: true,
    data: {
      availableProviders: providers,
      config: aiService.getConfig()
    }
  });
}
